version: '3.7'

services:
  blog:
    # Change it for deploy to production. Consult with readme.md.
    # Used for prevent download latest stable image during test, so for force use local image.
    # See also DeployIT#checkImageExistence
    image: nkonev/blog:current-test
    logging:
      driver: "json-file"
#      options:
#        tag: blog
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 120s
      labels:
        - traefik.enable=true
        - traefik.backend=blog
        - traefik.frontend.rule=PathPrefix:/;Host:blog.test
        - traefik.port=8098
        - traefik.docker.network=proxy_backend
        - traefik.backend.healthcheck.path=/actuator/health
        - traefik.backend.healthcheck.interval=2s
        - traefik.backend.healthcheck.port=3010
        - traefik.backend.healthcheck.scheme=http
    environment:
      # https://stackoverflow.com/questions/28327620/difference-between-java-options-java-tool-options-and-java-opts
      # https://blogs.oracle.com/poonam/about-g1-garbage-collector%2c-permanent-generation-and-metaspace
      # https://www.cs.mun.ca/java-api-1.5/guide/management/agent.html
      - _JAVA_OPTIONS=-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=256M -XX:OnOutOfMemoryError="kill -9 %p" -Dnetworkaddress.cache.ttl=0 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/blog -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=6066
      - SPRING_PROFILES_ACTIVE=demo
      - SERVER_PORT=8098
      - CUSTOM_STOMP_BROKER_HOST=rabbitmq
      - CUSTOM_STOMP_BROKER_PORT=61613
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/blog?connectTimeout=10&socketTimeout=40
      - SPRING_FLYWAY_OUT-OF-ORDER=false
      - SPRING_REDIS_URL=redis://redis:6379/0
      - SPRING_ELASTICSEARCH_REST_URIS=elasticsearch:9200
      - SPRING_RESOURCES_STATIC-LOCATIONS=file:/opt/blog/www/, classpath:/static/
      - CUSTOM_RENDERTRON_ENABLE=true
      - CUSTOM_RENDERTRON_SERVICE-URL=http://rendertron:3000/render/
      - CUSTOM_RENDERTRON_CRAWLER-USER-AGENTS=googlebot,prometheus
      - SPRING_MAIL_HOST=smtp.yandex.ru
      - CUSTOM_EMAIL_FROM=username@yandex.ru
      - SPRING_MAIL_USERNAME=username
      - SPRING_MAIL_PASSWORD=password
      - CUSTOM_BASE-URL=http://blog:8098
      - MANAGEMENT_HEALTH_MAIL_ENABLED=false
      - CUSTOM_RENDERTRON_CACHE-EXPIRE-TIME-UNIT=HOURS
      - CUSTOM_RENDERTRON_CACHE-EXPIRE=72
      - CUSTOM_IMAGE_MAX-BYTES=4194304
      - SPRING_SERVLET_MULTIPART_MAX-FILE-SIZE=6MB
      - SPRING_SERVLET_MULTIPART_MAX-REQUEST-SIZE=8MB
      - CUSTOM_ELASTICSEARCH_DROP-FIRST=false
      - management.health.mail.enabled=false
      # use same cookie for applications
      - server.servlet.session.cookie.domain=blog.test
    volumes:
      - ./www:/opt/blog/www
    ports:
      - 8098:8098
      - 3020:3010
    networks:
      - traefik_backend
      - backend
  traefik:
    image: traefik:1.7.11-alpine
    hostname: traefik
    command: -c /traefik.toml
    ports:
      # need for visibility real ip in traefik logs
      # https://docs.docker.com/engine/swarm/services/#publish-a-services-ports-directly-on-the-swarm-node
      # https://docs.docker.com/compose/compose-file/#long-syntax-1
      # https://stackoverflow.com/questions/39854682/log-clients-real-ip-address-in-docker-swarm-1-12-when-accessing-a-service
      - target: 80
        published: 8088
        mode: host
      - target: 443
        published: 8445
        mode: host
      - "10000:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.toml:/traefik.toml
#      - /dev/null:/traefik.toml
      - ./traefik/acme.json:/acme.json
    depends_on:
      - blog
    logging:
      driver: "json-file"
#      options:
#        tag: traefik
    networks:
      - traefik_backend
      - backend

  postgresql:
    image: postgres:12.1
    hostname: postgresql
    environment:
      - POSTGRES_PASSWORD=postgresqlPassword
    volumes:
      - ./postgresql_prod/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - postgresql_prod_data_dir:/var/lib/postgresql/data
    ports:
      - 15432:5432
    logging:
      driver: "json-file"
#      options:
#        tag: postgresql
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - backend
  redis:
    image: redis:5.0.5
    hostname: redis
    volumes:
      - redis_prod_data_dir:/data
    ports:
      - 16379:6379
    logging:
      driver: "json-file"
#      options:
#        tag: redis
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3.7.6
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=blog
      - RABBITMQ_DEFAULT_PASS=blogPazZw0rd
      - RABBITMQ_NODENAME=my-rabbit
    volumes:
      - ./rabbitmq_prod/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - rabbitmq_prod_data_dir:/var/lib/rabbitmq/mnesia
    ports:
      - 45602:15672
      - 60603:61613
    logging:
      driver: "json-file"
#      options:
#        tag: rabbitmq
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
      - backend
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    hostname: elasticsearch
    environment:
    - discovery.type=single-node
    - cluster.name=elasticsearch
    - xpack.security.enabled=false
    - xpack.enrich.enabled=false
    - xpack.graph.enabled=false
    - xpack.watcher.enabled=false
    - xpack.monitoring.enabled=false
    - xpack.ml.enabled=false
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
    - es_prod_data_dir:/usr/share/elasticsearch/data
    ports:
      - 19200:9200
      - 19300:9300
    logging:
      driver: "json-file"
#      options:
#        tag: elasticsearch
    deploy:
      placement:
        constraints: [node.labels.blog.server.role == db]
    networks:
    - backend

  rendertron:
    image: nkonev/rendertron-docker:0.0.4
    hostname: rendertron
    logging:
      driver: "json-file"
#      options:
#        tag: rendertron
    ports:
      - 13000:3000

    deploy:
      resources:
        limits:
          cpus: '0.40'
    networks:
      - traefik_backend
      - backend
  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter:v0.27.1
    hostname: rabbitmq_exporter
    ports:
      - 9191:9191
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=blog
      - RABBIT_PASSWORD=blogPazZw0rd
      - PUBLISH_PORT=9191
      - LOG_LEVEL=warning
    logging:
      driver: "json-file"
#      options:
#        tag: rabbitmq_exporter
    networks:
      - backend
  postgresql_exporter:
    image: wrouesnel/postgres_exporter:v0.4.7
    hostname: postgresql_exporter
    ports:
      - 9187:9187
    volumes:
      - ./postgresql_exporter/queries.yaml:/queries.yaml
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgresqlPassword@postgresql:5432/blog?sslmode=disable
    command: ["--extend.query-path", "/queries.yaml"]
    logging:
      driver: "json-file"
#      options:
#        tag: postgresql_exporter
    networks:
      - traefik_backend
      - backend
  redis_exporter:
    image: oliver006/redis_exporter:v0.17.2
    hostname: redis_exporter
    ports:
      - 9121:9121
    environment:
      - REDIS_ADDR=redis://redis:6379
    logging:
      driver: "json-file"
#      options:
#        tag: redis_exporter
    networks:
      - backend
  node_exporter:
    image: prom/node-exporter:v0.16.0
    hostname: 'node_exporter'
    ports:
      - '9100:9100'
    command:
      - '--log.level=fatal'
      - '--log.format=logger:stdout'
      - '--path.rootfs=/host'
    volumes:
      - /:/rootfs:ro
    logging:
      driver: "json-file"
#      options:
#        tag: node_exporter
    networks:
      - backend
  blackbox_exporter:
    image: prom/blackbox-exporter:v0.12.0
    hostname: 'blackbox_exporter'
    ports:
      - '9115:9115'
    volumes:
      - ./blackbox_exporter/blackbox.yml:/config/blackbox.yml
    command: ['--config.file=/config/blackbox.yml']
    logging:
      driver: "json-file"
#      options:
#        tag: blackbox_exporter
    networks:
      - traefik_backend
      - backend
  prometheus:
    image: prom/prometheus:v2.3.1
    hostname: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerting.yml:/etc/prometheus/alerting.yml
      - prometheus_data:/prometheus
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.backend=prometheus
        - traefik.frontend.rule=PathPrefix:/;Host:prometheus.blog.test
        - traefik.port=9090
        - traefik.docker.network=proxy_backend
        - traefik.frontend.auth.basic.users=admin:$$apr1$$naLpVBK2$$beVtB2oo9bUZuNjkBHyeA1
    logging:
      driver: "json-file"
#      options:
#        tag: prometheus
    networks:
      - traefik_backend
      - backend

  alertmanager:
    image: prom/alertmanager:v0.15.0
    hostname: alertmanager
    volumes:
      - ./alertmanager/alert.yml:/alert.yml
    command: ["--config.file", "/alert.yml", "--web.external-url", "http://alertmanager.blog.test"]
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.backend=alertmanager
        - traefik.frontend.rule=PathPrefix:/;Host:alertmanager.blog.test
        - traefik.port=9093
        - traefik.docker.network=proxy_backend
        - traefik.frontend.auth.basic.users=admin:$$apr1$$naLpVBK2$$beVtB2oo9bUZuNjkBHyeA1
    logging:
      driver: "json-file"
#      options:
#        tag: alertmanager
    networks:
      - backend
      - traefik_backend

  grafana:
    image: grafana/grafana:5.2.1
    hostname: grafana
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://grafana
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_prod_data_dir:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.backend=grafana
        - traefik.frontend.rule=PathPrefix:/;Host:grafana.blog.test
        - traefik.port=3000
        - traefik.docker.network=proxy_backend
        - traefik.frontend.auth.basic.users=admin:$$apr1$$naLpVBK2$$beVtB2oo9bUZuNjkBHyeA1
    logging:
      driver: "json-file"
#      options:
#        tag: grafana
    networks:
      - traefik_backend
      - backend
volumes:
  #enviroment
  postgresql_prod_data_dir:
  redis_prod_data_dir:
  rabbitmq_prod_data_dir:
  es_prod_data_dir:
  prometheus_data:
  grafana_data_prod_data_dir:

networks:
  backend:
    driver: overlay
  traefik_backend:
    external: true
    name: proxy_backend
